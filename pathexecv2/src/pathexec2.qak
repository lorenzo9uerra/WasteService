System pathexec2

Dispatch cmd       	: cmd(MOVE)     
Dispatch end       	: end(ARG)  
  
Request step       : step( TIME )	
Reply   stepdone   : stepdone(V)  
Reply   stepfail   : stepfail(DURATION, CAUSE)
   
Dispatch obstacle  : obstacle( ARG ) 	//generated by distancefilter
Event   info       : info( ARG ) 	    //for external components, not coap-observed

Request  dopath    : dopath( PATH  )
Reply dopathdone   : dopathdone( ARG )
Reply dopathfail   : dopathfail( ARG )
 
Context ctxbasicrobot ip [host="127.0.0.1" port=8020]  
Context ctxpathexec2 ip [host="localhost" port=8040]

ExternalQActor basicrobot context ctxbasicrobot

QActor pathexec2 context ctxpathexec2 { 
[# var CurMoveTodo = ""    //Upcase, since var to be used in guards
   var StepTime    = "300"
#]
	State s0 initial{  	
		//printCurrentMessage
		[#  CurMoveTodo = "" 
			StepTime = unibo.robot.robotSupport.readStepTime()
		#]
		println("pathexec ready. StepTime=$StepTime") 
	}	
	Transition t0 whenRequest dopath -> doThePath
  	
	State doThePath{
		printCurrentMessage 
		//[# prinln( currentMsg ) #]
		onMsg ( dopath : dopath( PATH )){
			run pathut.setPath( payloadArg(0) )  //se payloadArg fallisce non da eccezione! (ma non fa nulla)
		}		 
		println("pathexec pathTodo = ${pathut.getPathTodo()}") 
 	}
	Goto nextMove    
	
	
	State nextMove{ 
		[# CurMoveTodo = pathut.nextMove() #]	
		//println("pathexec curMoveTodo=$CurMoveTodo" )
	} 
	Goto endWorkOk if [# CurMoveTodo.length == 0 #] else doMove
	
	State doMove{
		//printCurrentMessage
 		//delay 300  //avoid too fast ...
 	}
	Goto doMoveW if [# CurMoveTodo == "w" #] else doMoveTurn
	
	State doMoveTurn{
		//printCurrentMessage
		forward basicrobot -m cmd : cmd($CurMoveTodo) //asynch !!!		
	}
	Transition t0 whenTime 300 ->  nextMove  //wait for move done ...
  
 	State doMoveW{
		//printCurrentMessage
		request basicrobot -m step : step( $StepTime )
	}	
	Transition t0 whenReply stepdone  -> nextMove  
	              whenReply stepfail  -> endWorkKo                       
	              
	State endWorkOk{
		//printCurrentMessage
		println("endWorkOk: PATH DONE - BYE")
		replyTo dopath with dopathdone : dopathdone( ok )
	}
	Goto s0 

	State endWorkKo{
		printCurrentMessage
		[# var PathStillTodo = pathut.getPathTodo() #]
		println("PATH FAILURE - SORRY. PathStillTodo=$PathStillTodo")
		replyTo dopath with dopathfail : dopathfail( $PathStillTodo )
	}	
	Goto s0


} 