System pathexecstop
//mqttBroker "broker.hivemq.com" : 1883 eventTopic "unibo/basicrobot"   //broker.hivemq.com

Request  dopath    : dopath( PATH  )
Reply dopathdone   : dopathdone( ARG )
Reply dopathfail   : dopathfail( ARG )

Dispatch stopPath : stopPath(_)
Dispatch resumePath : resumePath(_)

// whenTime + interrupt workaround
Request setAlarm : setAlarm(TIME)
Reply triggerAlarm : triggerAlarm(_)

Dispatch cmd       	: cmd(MOVE)     
Request step       : step( TIME )	
Reply   stepdone   : stepdone(V)  
Reply   stepfail   : stepfail(DURATION, CAUSE)
Event alarm        : alarm(X) 

Context ctx_pathexecstop ip [host="localhost" port=8025]

Context ctxbasicrobot ip [host="127.0.0.1" port=8020]  

ExternalQActor basicrobot context ctxbasicrobot

QActor pathexecstop context ctx_pathexecstop { 
[# var CurMoveTodo = ""    //Upcase, since var to be used in guards
   var StepTime    = "300"
   var PathTodo    = ""
#]
	State s0 initial{  	
		//printCurrentMessage
		[#  CurMoveTodo = "" 
			StepTime = pathexecStopSupport.readStepTime() //stepTimeConfig.json
		#]
		updateResource [# "pathexecsteptime($StepTime)" #]
		[# MsgUtil.outmagenta("pathexecstop ready. StepTime=$StepTime") #]
	}	
	Transition t0 whenRequest dopath -> doThePath
  	
	State doThePath{
		printCurrentMessage 
		//[# prinln( currentMsg ) #]
		onMsg ( dopath : dopath( PATH )){
			[# PathTodo = payloadArg(0) #]
		    updateResource [# "pathexecdopath($PathTodo)" #]
			run pathut.setPath( PathTodo )  //se payloadArg fallisce non da eccezione! (ma non fa nulla)
		}		 
		println("pathexecstop pathTodo = ${pathut.getPathTodo()}") 
 	}
	Goto nextMove    
	
	
	State nextMove{ 
		[# CurMoveTodo = pathut.nextMove() #]	
		println("pathexec curMoveTodo=$CurMoveTodo" )
	} 
	Goto endWorkOk if [# CurMoveTodo.length == 0 #] else doMove
	
	State doMove {
		request timer -m setAlarm : setAlarm(300)
	}
	Transition t0 whenReply triggerAlarm ->  applyMove
			  whenInterrupt stopPath -> stopped
	
	State applyMove {
		printCurrentMessage
 	}
	Goto doMoveW if [# CurMoveTodo == "w" #] else doMoveTurn
	
	State doMoveTurn {
		printCurrentMessage
		updateResource [# "pathexecdoturn($CurMoveTodo)" #]
		forward basicrobot -m cmd : cmd($CurMoveTodo) //asynch !!!		
		request timer -m setAlarm : setAlarm(300)
	}
	Transition t0 whenReply triggerAlarm ->  nextMove  //wait for move done ...
				  whenInterrupt stopPath -> stopped
  
 	State doMoveW{
		printCurrentMessage
		updateResource [# "pathexecdostep($CurMoveTodo)" #]
		request basicrobot -m step : step( $StepTime )
	}	
	Transition t0 whenEvent alarm     -> endWorkKo
 				  whenReply stepdone  -> nextMove  
	              whenReply stepfail  -> endWorkKo                       
  				  whenInterrupt stopPath -> stopped
	              
	State endWorkOk{
		//printCurrentMessage
		[# MsgUtil.outgreen("endWorkOk: PATH DONE - BYE") #]
		updateResource [# "path $PathTodo done" #]	
		replyTo dopath with dopathdone : dopathdone( ok )
	}
	Goto s0 
 
	State endWorkKo{
		printCurrentMessage
		[# var PathStillTodo = pathut.getPathTodo() #]
		updateResource [# "pathstilltodo($PathStillTodo)" #]	
		[# MsgUtil.outred("PATH FAILURE - SORRY. PathStillTodo=$PathStillTodo") #]
		replyTo dopath with dopathfail : dopathfail( $PathStillTodo )
	}	
	Goto s0

	State stopped {
		[# MsgUtil.outred("pathexecstop: stopped!") #]
		updateResource [# "pathexecstopped()" #]
	}
	Transition t0 whenMsg resumePath -> resume
	
	State resume {
		[# MsgUtil.outgreen("pathexecstop: resumed!") #]
		updateResource [# "pathexecresumed()" #]
		returnFromInterrupt
	}
} 

// Workaround per whenTime + interrupt, usabile da
// un attore alla volta
QActor timer context ctx_pathexecstop {
	State wait initial {
	}
	Transition t6 whenRequest setAlarm -> handleAlarm
	
	State handleAlarm {
		onMsg (setAlarm : setAlarm(TIME)) {
			[# val Time = payloadArg(0).toLong() #]
			delayVar Time
			replyTo setAlarm with triggerAlarm : triggerAlarm(_)
		}
	}
	Goto wait
}

