/* Generated by AN DISI Unibo */ 
package it.unibo.timer

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Timer ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "wait"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
		return { //this:ActionBasciFsm
				state("wait") { //this:State
					action { //it:State
					}
					 transition(edgeName="t610",targetState="handleAlarm",cond=whenRequest("setAlarm"))
				}	 
				state("handleAlarm") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("setAlarm(TIME)"), Term.createTerm("setAlarm(TIME)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 val Time = payloadArg(0).toLong()  
								delay(Time)
								answer("setAlarm", "triggerAlarm", "triggerAlarm(_)"   )  
						}
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
			}
		}
}
