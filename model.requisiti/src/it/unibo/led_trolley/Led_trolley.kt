/* Generated by AN DISI Unibo */ 
package it.unibo.led_trolley

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Led_trolley ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "wait"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
		return { //this:ActionBasciFsm
				state("wait") { //this:State
					action { //it:State
						delay(1000) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="randomStatus", cond=doswitch() )
				}	 
				state("randomStatus") { //this:State
					action { //it:State
						if(  kotlin.random.Random.nextFloat() > 0.5  
						 ){println("	Trolley working")
						emit("trolleyStatus", "trolleyStatus(working)" ) 
						}
						else
						 {if(  kotlin.random.Random.nextFloat() > 0.5  
						  ){println("	Trolley stopped")
						 emit("trolleyStatus", "trolleyStatus(stopped)" ) 
						 }
						 else
						  {println("	Trolley at home")
						  emit("trolleyStatus", "trolleyStatus(home)" ) 
						  }
						 }
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
			}
		}
}
