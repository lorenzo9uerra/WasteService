/* Generated by AN DISI Unibo */ 
package it.unibo.dep_trolley

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Dep_trolley ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "home"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
		
				var CarryingType = ""
				var CarryingAmount = 0.0
		return { //this:ActionBasciFsm
				state("home") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						println("	Trolley | At home")
						updateResourceRep( "pos(home)"  
						)
					}
					 transition(edgeName="t00",targetState="go_indoor",cond=whenDispatch("deposit"))
				}	 
				state("go_indoor") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						if( checkMsgContent( Term.createTerm("deposit(MAT,QNT)"), Term.createTerm("deposit(MAT,QNT)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
											CarryingType = payloadArg(0)
											CarryingAmount = payloadArg(1).toDouble()	
						}
						delay(500) 
					}
					 transition( edgeName="goto",targetState="indoor", cond=doswitch() )
				}	 
				state("indoor") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						println("	Trolley | At indoor, picking up $CarryingAmount $CarryingType...")
						updateResourceRep( "pos(indoor)"  
						)
						delay(500) 
					}
					 transition( edgeName="goto",targetState="go_box", cond=doswitch() )
				}	 
				state("go_box") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						delay(500) 
					}
					 transition( edgeName="goto",targetState="box", cond=doswitch() )
				}	 
				state("box") { //this:State
					action { //it:State
						println("	Trolley | At $CarryingType box, depositing $CarryingAmount $CarryingType...")
						updateResourceRep( "pos(" + CarryingType + "_box)"  
						)
						delay(200) 
						forward("depositWaste", "depositWaste($CarryingType,$CarryingAmount)" ,"dep_waste_boxes" ) 
					}
					 transition( edgeName="goto",targetState="done", cond=doswitch() )
				}	 
				state("done") { //this:State
					action { //it:State
						println("	Trolley | Done deposit action")
					}
				}	 
			}
		}
}
