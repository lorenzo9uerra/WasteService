/* Generated by AN DISI Unibo */ 
package it.unibo.trolley_gui

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Trolley_gui ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "wait"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
		return { //this:ActionBasciFsm
				state("wait") { //this:State
					action { //it:State
						delay(1000) 
					}
					 transition( edgeName="goto",targetState="randomStatus", cond=doswitch() )
				}	 
				state("randomStatus") { //this:State
					action { //it:State
						
									var Status = ""
									var Position = ""	
						
									var r = kotlin.random.Random.nextFloat() 
									if (r < 0.25) {
										Position = "indoor"
									} else if (r < 0.5) {
										Position = "room"
									} else if (r < 0.75) {
										Position = "glass box"
									} else {
										Position = "plastic box"
									}
						if(  kotlin.random.Random.nextFloat() > 0.5  
						 ){ Status = "working"  
						}
						else
						 {if(  kotlin.random.Random.nextFloat() > 0.5  
						  ){ Status = "stopped"  
						 }
						 else
						  { 
						  					Status = "home"
						  					Position = "home"
						  }
						 }
						emit("trolleyStatus", "trolleyStatus($Status,$Position)" ) 
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
			}
		}
}
