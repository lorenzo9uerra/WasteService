/* Generated by AN DISI Unibo */ 
package it.unibo.trolley_sonar

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Trolley_sonar ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "work"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
		return { //this:ActionBasciFsm
				state("work") { //this:State
					action { //it:State
						println("	Trolley: Working...")
					}
					 transition(edgeName="t00",targetState="stopped",cond=whenEvent("sonarStop"))
				}	 
				state("stopped") { //this:State
					action { //it:State
						println("	Trolley: Stopped!")
					}
					 transition(edgeName="t01",targetState="work",cond=whenEvent("sonarResume"))
				}	 
			}
		}
}
