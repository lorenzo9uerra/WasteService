/* Generated by AN DISI Unibo */ 
package it.unibo.wastetruck_req

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Wastetruck_req ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "req"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
		
				var Runs = 4 // Limita esecuzione
		return { //this:ActionBasciFsm
				state("req") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						
									var Material = if (kotlin.random.Random.nextFloat() > 0.5) "glass" else "plastic"
									var Quantity = kotlin.random.Random.nextInt(10, 30)	
						println("	Truck with $Material in amount $Quantity arrived")
						request("loadDeposit", "loadDeposit($Material,$Quantity)" ,"wasteservice_req" )  
					}
					 transition(edgeName="t10",targetState="handleAccepted",cond=whenReply("loadaccept"))
					transition(edgeName="t11",targetState="handleRejected",cond=whenReply("loadrejected"))
				}	 
				state("handleRejected") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						println("	Truck denied")
					}
					 transition( edgeName="goto",targetState="waitArrival", cond=doswitch() )
				}	 
				state("handleAccepted") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						println("	Truck accepted")
					}
					 transition( edgeName="goto",targetState="waitArrival", cond=doswitch() )
				}	 
				state("waitArrival") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						 var DelayTime : kotlin.Long = kotlin.random.Random.nextLong(7000, 10000)  
						delay(DelayTime)
						 Runs--  
					}
					 transition( edgeName="goto",targetState="req", cond=doswitchGuarded({ Runs > 0  
					}) )
					transition( edgeName="goto",targetState="finish", cond=doswitchGuarded({! ( Runs > 0  
					) }) )
				}	 
				state("finish") { //this:State
					action { //it:State
						println("Finished!")
					}
				}	 
			}
		}
}
