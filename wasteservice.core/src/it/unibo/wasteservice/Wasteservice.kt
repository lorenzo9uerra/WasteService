/* Generated by AN DISI Unibo */ 
package it.unibo.wasteservice

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Wasteservice ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "start"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
		
				val Support = it.unibo.lenziguerra.wasteservice.wasteservice.WasteserviceSupport()
				var Material = ""
				var Quantity = 0.0f
				var Box = ""
				var Position = "0,0"
		return { //this:ActionBasciFsm
				state("start") { //this:State
					action { //it:State
						println("	WS | Start")
					}
					 transition( edgeName="goto",targetState="home", cond=doswitch() )
				}	 
				state("home") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						updateResourceRep( "tpos(home)"  
						)
						println("	WS | Trolley at home")
					}
					 transition(edgeName="t00",targetState="go_indoor",cond=whenRequest("triggerDeposit"))
				}	 
				state("go_indoor") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						if( checkMsgContent( Term.createTerm("triggerDeposit(MAT,QNT)"), Term.createTerm("triggerDeposit(MAT,QNT)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												Material = payloadArg(0)
												Quantity = payloadArg(1).toFloat()
												Box = Material + "_box"
						}
						 Position = Support.getDestination("indoor", Position)  
						request("trolleyMove", "trolleyMove($Position)" ,"trolley" )  
					}
					 transition(edgeName="t21",targetState="indoor",cond=whenReply("trolleyDone"))
					transition(edgeName="t22",targetState="error",cond=whenReply("trolleyFail"))
				}	 
				state("indoor") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						println("	WT | Trolley at indoor, picking up $Quantity $Material...")
						updateResourceRep( "tpos(indoor)"  
						)
						request("trolleyCollect", "trolleyCollect($Material,$Quantity)" ,"trolley" )  
					}
					 transition(edgeName="t33",targetState="go_box",cond=whenReply("trolleyDone"))
					transition(edgeName="t34",targetState="error",cond=whenReply("trolleyFail"))
				}	 
				state("go_box") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						answer("triggerDeposit", "trolleyPickedUp", "trolleyPickedUp(_)"   )  
						 Position = Support.getDestination(Box, Position)  
						request("trolleyMove", "trolleyMove($Position)" ,"trolley" )  
					}
					 transition(edgeName="t45",targetState="box",cond=whenReply("trolleyDone"))
					transition(edgeName="t46",targetState="error",cond=whenReply("trolleyFail"))
				}	 
				state("box") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						println("	WT | Trolley at $Material box, depositing $Quantity $Material...")
						 Support.updateTrolleyPos(Box)  
						updateResourceRep( "tpos($Box)"  
						)
						request("trolleyDeposit", "trolleyDeposit(_)" ,"trolley" )  
					}
					 transition(edgeName="t57",targetState="done",cond=whenReply("trolleyDone"))
					transition(edgeName="t58",targetState="error",cond=whenReply("trolleyFail"))
				}	 
				state("done") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						println("	WT | Done deposit action")
						stateTimer = TimerActor("timer_done", 
							scope, context!!, "local_tout_wasteservice_done", 0.toLong() )
					}
					 transition(edgeName="t09",targetState="go_home",cond=whenTimeout("local_tout_wasteservice_done"))   
					transition(edgeName="t010",targetState="go_indoor",cond=whenRequest("triggerDeposit"))
				}	 
				state("go_home") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						 Position = Support.getDestination("home", Position)  
						request("trolleyMove", "trolleyMove($Position)" ,"trolley" )  
					}
					 transition(edgeName="t711",targetState="home_rotate",cond=whenReply("trolleyDone"))
					transition(edgeName="t712",targetState="error",cond=whenReply("trolleyFail"))
				}	 
				state("home_rotate") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						request("trolleyRotate", "trolleyRotate(down)" ,"trolley" )  
					}
					 transition(edgeName="t713",targetState="home",cond=whenReply("trolleyDone"))
					transition(edgeName="t714",targetState="error",cond=whenReply("trolleyFail"))
				}	 
				state("error") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("trolleyFail(ERR)"), Term.createTerm("trolleyFail(ERR)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								updateResourceRep( "tpos(unknown)\nerror(${payloadArg(0)})"  
								)
						}
						println("$name in ${currentState.stateName} | $currentMsg")
						println("####################################")
						println("# WASTESERVICE: ERRORE! AGGIUSTARE #")
						println("# MANUALMENTE E RIAVVIARE!         #")
						println("####################################")
					}
				}	 
			}
		}
}
