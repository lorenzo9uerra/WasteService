/* Generated by AN DISI Unibo */ 
package it.unibo.trolley

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Trolley ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "init"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
		
				val Support = it.unibo.lenziguerra.wasteservice.trolley.TrolleySupport.getSupport()
				var WaitingPath = false
		return { //this:ActionBasciFsm
				state("init") { //this:State
					action { //it:State
						 Support.updateState("work")  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("idle") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						 Support.updateActivity("idle")  
						updateResourceRep( Support.getPrologContent()  
						)
						 MsgUtil.outmagenta("Trolley ready. Current status:")  
						println("$Support")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t016",targetState="handleMove",cond=whenRequest("trolleyMove"))
					transition(edgeName="t017",targetState="handleCollect",cond=whenRequest("trolleyCollect"))
					transition(edgeName="t018",targetState="handleDeposit",cond=whenRequest("trolleyDeposit"))
					transition(edgeName="t019",targetState="handleRotate",cond=whenRequest("trolleyRotate"))
					interrupthandle(edgeName="t020",targetState="handleStop",cond=whenDispatch("trolleyStop"),interruptedStateTransitions)
				}	 
				state("exitFromStop") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						 Support.updateState("work")  
						updateResourceRep( Support.getPrologContent()  
						)
						 MsgUtil.outgreen("Trolley resuming...")  
						if(  WaitingPath  
						 ){forward("resumePath", "resumePath(_)" ,"pathexecstop" ) 
						}
						returnFromInterrupt(interruptedStateTransitions)
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
				state("handleStop") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						 Support.updateState("stopped")  
						updateResourceRep( Support.getPrologContent()  
						)
						 MsgUtil.outred("Trolley stopped!")  
						if(  WaitingPath  
						 ){forward("stopPath", "stopPath(_)" ,"pathexecstop" ) 
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t021",targetState="exitFromStop",cond=whenDispatch("trolleyResume"))
				}	 
				state("handleMove") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						 Support.updateState("work")  
						 Support.updateActivity("travel")  
						updateResourceRep( Support.getPrologContent()  
						)
						if( checkMsgContent( Term.createTerm("trolleyMove(X,Y)"), Term.createTerm("trolleyMove(X,Y)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 
												val Path = Support.preparePath(payloadArg(0).toInt(), payloadArg(1).toInt()) 
												println("Doing path $Path")
								 WaitingPath = true  
								request("dopath", "dopath($Path)" ,"pathexecstop" )  
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t022",targetState="moveSuccess",cond=whenReply("dopathdone"))
					transition(edgeName="t023",targetState="moveFail",cond=whenReply("dopathfail"))
					interrupthandle(edgeName="t024",targetState="handleStop",cond=whenDispatch("trolleyStop"),interruptedStateTransitions)
				}	 
				state("handleRotate") { //this:State
					action { //it:State
						 Support.updateState("work")  
						 Support.updateActivity("travel")  
						updateResourceRep( Support.getPrologContent()  
						)
						println("$name in ${currentState.stateName} | $currentMsg")
						if( checkMsgContent( Term.createTerm("trolleyRotate(DIR)"), Term.createTerm("trolleyRotate(DIR)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												val Path = Support.prepareRotation(payloadArg(0))
												println("Doing rotation $Path")
								 WaitingPath = true  
								request("dopath", "dopath($Path)" ,"pathexecstop" )  
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t025",targetState="rotateSuccess",cond=whenReply("dopathdone"))
					transition(edgeName="t026",targetState="moveFail",cond=whenReply("dopathfail"))
					interrupthandle(edgeName="t027",targetState="handleStop",cond=whenDispatch("trolleyStop"),interruptedStateTransitions)
				}	 
				state("moveSuccess") { //this:State
					action { //it:State
						 Support.applyPath()  
						 WaitingPath = false  
						answer("trolleyMove", "trolleyDone", "trolleyDone(_)"   )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("rotateSuccess") { //this:State
					action { //it:State
						 Support.applyPath()  
						 WaitingPath = false  
						answer("trolleyRotate", "trolleyDone", "trolleyDone(_)"   )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("moveFail") { //this:State
					action { //it:State
						 Support.updateState("error")  
						 WaitingPath = false  
						answer("trolleyMove", "trolleyFail", "trolleyFail(move)"   )  
						println("####################################")
						println("# TROLLEY BLOCCATO! AGGIUSTARE     #")
						println("# MANUALMENTE E RIAVVIARE!         #")
						println("####################################")
						  
						    		Support.setPosition(0,0)
						    		Support.setRotation("down")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("handleCollect") { //this:State
					action { //it:State
						 Support.updateState("work")  
						 Support.updateActivity("collect")  
						updateResourceRep( Support.getPrologContent()  
						)
						println("$name in ${currentState.stateName} | $currentMsg")
						if( checkMsgContent( Term.createTerm("trolleyCollect(MAT,QNT)"), Term.createTerm("trolleyCollect(MAT,QNT)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												Support.collect(payloadArg(0), payloadArg(1).toFloat())
								answer("trolleyCollect", "trolleyDone", "trolleyDone(_)"   )  
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("handleDeposit") { //this:State
					action { //it:State
						 Support.updateState("work")  
						 Support.updateActivity("deposit")  
						updateResourceRep( Support.getPrologContent()  
						)
						println("$name in ${currentState.stateName} | $currentMsg")
						if( checkMsgContent( Term.createTerm("trolleyDeposit(_)"), Term.createTerm("trolleyDeposit(_)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												val Material = Support.getMaterial()
												val Quantity = Support.getQuantity()
												Support.deposit()
								forward("storageDeposit", "storageDeposit($Material,$Quantity)" ,"storagemanager" ) 
								answer("trolleyDeposit", "trolleyDone", "trolleyDone(_)"   )  
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
			}
		}
}
