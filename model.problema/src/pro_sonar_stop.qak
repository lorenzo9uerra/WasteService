System wasteservice_pro_sonar_stop

Event sonarDistance : sonarDistance(DIST)
Dispatch trolleyStop : trolleyStop(_)
Dispatch trolleyResume : trolleyResume(_)

// Usato al posto di whenTime 0, vedi sotto
Request ping : ping(_)
Reply pong : pong(_)

Context ctxpro_sonar_stop ip [host="localhost" port=8050]

QActor sonarshim context ctxpro_sonar_stop {
	[#
		var Val = 200
		var Wait = 2000L
	#]

	State scanWait initial {
		[# Wait = kotlin.random.Random.nextLong(1000, 3500) #]
	}
	Transition t0 whenTimeVar Wait -> scan
	
	State scan {
		[# 
			var PrevVal = Val
			Val = 200 - Val
		#]
		if [# PrevVal != Val #] {
			println("\tSonar: detected distance $Val")
			emit sonarDistance : sonarDistance($Val)
			updateResource [# "$Val" #]			
		}
	}
	Goto scanWait
}

QActor sonarinterrupter context ctxpro_sonar_stop {
	[# 
	var prevDist: Float? = null
	var DLIMIT = 100
	#]
	State idle initial {
	}
	Transition t0 whenEvent sonarDistance -> handleDistance
	
	State handleDistance {
		printCurrentMessage
		onMsg ( sonarDistance : sonarDistance(DIST) ) {
			[# val dLimit = DLIMIT #]
			[# val dist = payloadArg(0).toFloat() #]
			// != e == false avendo anche null come possibile valore di let
			// non mandare resume all'inizio quando è null
			if [# dist <= dLimit && prevDist?.let {it > dLimit } != false #] {
				println("INVIO STOP")
				forward trolley -m trolleyStop : trolleyStop(_)
			}
			if [# dist > dLimit && prevDist?.let {it > dLimit } == false #] {
				println("INVIO RESUME")
				forward trolley -m trolleyResume : trolleyResume(_)
			}
			[# prevDist = dist #]
		}
	}
	Goto idle
}

QActor trolley context ctxpro_sonar_stop {
	State goingIndoor initial {
		println("Going INDOOR")
		delay 1000
		println("At INDOOR")
		request echo -m ping : ping(_)
	}	
	Transition t0 whenReply pong -> goingBox
				  whenInterrupt trolleyStop -> handleStop

  	State goingBox{
  		println("Going BOX")
		delay 1000
		println("At BOX")
		request echo -m ping : ping(_)
  	}
	Transition t1 whenReply pong -> goingHome
				  whenInterrupt trolleyStop -> handleStop
  	
  	State goingHome{
  		println("Going HOME")
		delay 1000
 		println("At HOME")
 		request echo -m ping : ping(_)
  	}
	Transition t2 whenReply pong -> goingIndoor
				  whenInterrupt trolleyStop -> handleStop
  	
  	State exitFromStop{
  		[# MsgUtil.outgreen("Trolley resumed!") #]
   		updateResource [# "resumed" #]
  		returnFromInterrupt
  	}
  	
  	State handleStop{
  		[# MsgUtil.outred("Trolley stopped!") #]
  		updateResource [# "stopped" #]
  	}
  	Transition t3 whenMsg trolleyResume -> exitFromStop
}

// usato al posto di whenTime 0
// dati i problemi di whenTime con whenInterrupt
QActor echo context ctxpro_sonar_stop {
	State wait initial {
	}
	Transition t1 whenRequest ping -> reply
	
	State reply {
		replyTo ping with pong : pong(_)
	}
	Goto wait
}

