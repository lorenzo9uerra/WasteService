/* Generated by AN DISI Unibo */ 
package it.unibo.sonar_shim

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Sonar_shim ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "scanWait"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
		
				var Val = 200
		return { //this:ActionBasciFsm
				state("scanWait") { //this:State
					action { //it:State
						delay(500) 
					}
					 transition( edgeName="goto",targetState="scan", cond=doswitch() )
				}	 
				state("scan") { //this:State
					action { //it:State
						 
									var PrevVal = Val
									Val = (Val + kotlin.random.Random.nextInt(-60, 50)).coerceIn(0, 200) 
						if(  PrevVal != Val  
						 ){println("	Sonar: detected distance $Val")
						emit("sonarDistance", "sonarDistance($Val)" ) 
						updateResourceRep( "$Val"  
						)
						}
					}
					 transition( edgeName="goto",targetState="scanWait", cond=doswitch() )
				}	 
			}
		}
}
