/* Generated by AN DISI Unibo */ 
package it.unibo.pro_req_wasteservice

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Pro_req_wasteservice ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "idle"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
		
			  var CurrentType = ""
			  var CurrentAmount = 0.0
			  var CurrentRequestPass = false
		return { //this:ActionBasciFsm
				state("idle") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="tIdle0",targetState="handleRequest",cond=whenRequest("loadDeposit"))
				}	 
				state("handleRequest") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						if( checkMsgContent( Term.createTerm("loadDeposit(MAT,QNT)"), Term.createTerm("loadDeposit(MAT,QNT)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 
								  				CurrentType = payloadArg(0)
								  				CurrentAmount = payloadArg(1).toDouble()
								println("	WS | Request received $CurrentType $CurrentAmount")
								request("storageAsk", "storageAsk($CurrentType)" ,"pro_req_storagemanager" )  
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t01",targetState="handleStorageReply",cond=whenReply("storageAt"))
				}	 
				state("handleStorageReply") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						 CurrentRequestPass = false  
						if( checkMsgContent( Term.createTerm("storageAt(MAT,QNT)"), Term.createTerm("storageAt(MAT,QNT)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("	WS | Has space: ${payloadArg(1)} for ${payloadArg(0)}")
								 CurrentRequestPass = CurrentAmount <= payloadArg(1).toDouble()  
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="sendTrolley", cond=doswitchGuarded({ CurrentRequestPass  
					}) )
					transition( edgeName="goto",targetState="rejectRequest", cond=doswitchGuarded({! ( CurrentRequestPass  
					) }) )
				}	 
				state("rejectRequest") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						println("	WS | rejected")
						answer("loadDeposit", "loadrejected", "loadrejected(_)"   )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("sendTrolley") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						answer("loadDeposit", "loadaccept", "loadaccept(_)"   )  
						println("	WS | accepted")
						delay(1000) 
						println("	WS | done, sending away truck")
						forward("pickedUp", "pickedUp(_)" ,"pro_req_wastetruck" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
			}
		}
}
