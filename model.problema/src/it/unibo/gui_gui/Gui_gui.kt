/* Generated by AN DISI Unibo */ 
package it.unibo.gui_gui

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Gui_gui ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "init"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
				var TrolleyPos = ""
				var TrolleyStatus = ""
				var LedStatus =	""
		return { //this:ActionBasciFsm
				state("init") { //this:State
					action { //it:State
						coapObserverUtil.startObserving(myself ,"trolley_gui" )
						coapObserverUtil.startObserving(myself ,"led_gui" )
					}
					 transition( edgeName="goto",targetState="show", cond=doswitch() )
				}	 
				state("show") { //this:State
					action { //it:State
						println("	GUI: Trolley [Position: $TrolleyPos, Status: $TrolleyStatus], Led [$LedStatus]")
					}
					 transition(edgeName="t00",targetState="handleUpdate",cond=whenDispatch("coapUpdate"))
				}	 
				state("handleUpdate") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						if( checkMsgContent( Term.createTerm("coapUpdate(RESOURCE,VALUE)"), Term.createTerm("coapUpdate(RESOURCE,VALUE)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								if(  payloadArg(0) == "trolley_gui"  
								 ){
								  					val split = payloadArg(1).split(",")
								  					TrolleyStatus = split[0].trim()
								  					TrolleyPos = split[1].trim()
								}
								if(  payloadArg(0) == "led_gui"  
								 ){ LedStatus = payloadArg(1)  
								}
						}
					}
					 transition( edgeName="goto",targetState="show", cond=doswitch() )
				}	 
			}
		}
}
