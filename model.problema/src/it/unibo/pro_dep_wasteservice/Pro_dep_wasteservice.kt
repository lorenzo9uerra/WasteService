/* Generated by AN DISI Unibo */ 
package it.unibo.pro_dep_wasteservice

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Pro_dep_wasteservice ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "home"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
		
				// Semplificato, usando singola coordinata invece che area
				var POS_HOME = arrayOf(0,0)
				var POS_INDOOR = arrayOf(0,5)
				var POS_PLASTIC_BOX = arrayOf(5,2)
				var POS_GLASS_BOX = arrayOf(3,0)
				
				var CurrentType = ""
				var CurrentAmount = 0.0
		return { //this:ActionBasciFsm
				state("home") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						updateResourceRep( "tpos(home)"  
						)
						println("	WS | Trolley at home")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t00",targetState="go_indoor",cond=whenRequest("loadDeposit"))
				}	 
				state("go_indoor") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						answer("loadDeposit", "loadaccept", "loadaccept(_)"   )  
						if( checkMsgContent( Term.createTerm("loadDeposit(MAT,QNT)"), Term.createTerm("loadDeposit(MAT,QNT)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
											CurrentType = payloadArg(0)
											CurrentAmount = payloadArg(1).toDouble()	
								var X = POS_INDOOR[0]; var Y = POS_INDOOR[1] 
								request("trolleyMove", "trolleyMove($X,$Y)" ,"pro_dep_trolley" )  
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t01",targetState="indoor",cond=whenReply("trolleyDone"))
				}	 
				state("indoor") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						updateResourceRep( "tpos(indoor)"  
						)
						println("	WT | Trolley at indoor, picking up $CurrentAmount $CurrentType...")
						request("trolleyCollect", "trolleyCollect($CurrentType,$CurrentAmount)" ,"pro_dep_trolley" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t02",targetState="go_box",cond=whenReply("trolleyDone"))
				}	 
				state("go_box") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						var X = POS_GLASS_BOX[0]; var Y = POS_GLASS_BOX[1] 
						if(  CurrentType == "plastic"  
						 ){X = POS_PLASTIC_BOX[0]; Y = POS_PLASTIC_BOX[1] 
						}
						request("trolleyMove", "trolleyMove($X,$Y)" ,"pro_dep_trolley" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t03",targetState="box",cond=whenReply("trolleyDone"))
				}	 
				state("box") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						println("	WT | Trolley at $CurrentType box, depositing $CurrentAmount $CurrentType...")
						updateResourceRep( "tpos(" + CurrentType + "_box)"  
						)
						request("trolleyDeposit", "trolleyDeposit(_)" ,"pro_dep_trolley" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t04",targetState="done",cond=whenReply("trolleyDone"))
				}	 
				state("done") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						println("	WT | Done deposit action")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
				 	 		//sysaction { //it:State
				 	 		  stateTimer = TimerActor("timer_done", 
				 	 			scope, context!!, "local_tout_pro_dep_wasteservice_done", 0.toLong() )
				 	 		//}
					}	 	 
					 transition(edgeName="t05",targetState="go_home",cond=whenTimeout("local_tout_pro_dep_wasteservice_done"))   
					transition(edgeName="t06",targetState="go_indoor",cond=whenRequest("loadDeposit"))
				}	 
				state("go_home") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						var X = POS_HOME[0]; var Y = POS_HOME[1] 
						request("trolleyMove", "trolleyMove($X,$Y)" ,"pro_dep_trolley" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t07",targetState="home",cond=whenReply("trolleyDone"))
				}	 
			}
		}
}
