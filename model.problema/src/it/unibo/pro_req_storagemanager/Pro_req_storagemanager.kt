/* Generated by AN DISI Unibo */ 
package it.unibo.pro_req_storagemanager

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Pro_req_storagemanager ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "idle"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
		
				var Content = mutableMapOf("glass" to 0.0, "plastic" to 0.0)
		return { //this:ActionBasciFsm
				state("idle") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						println("STORAGE: Glass ${Content["glass"]}, Plastic ${Content["plastic"]}")
						updateResourceRep( "glass(" + Content["glass"] + ")\nplastic(" + Content["plastic"] + ")"  
						)
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t02",targetState="handleAsk",cond=whenRequest("storageAsk"))
				}	 
				state("handleAsk") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						if( checkMsgContent( Term.createTerm("storageAsk(MAT)"), Term.createTerm("storageAsk(MAT)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 var Amount = kotlin.random.Random.Default.nextDouble(15.0, 50.0)  
								answer("storageAsk", "storageAt", "storageAt(${payloadArg(0)},$Amount)"   )  
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
			}
		}
}
