System pathexecstop

Request  dopath    : dopath( PATH  )
Reply dopathdone   : dopathdone( ARG )
Reply dopathfail   : dopathfail( ARG )

Dispatch cmd       	: cmd(MOVE)     
Request step       : step( TIME )	
Reply   stepdone   : stepdone(V)  
Reply   stepfail   : stepfail(DURATION, CAUSE)
Event alarm        : alarm(X) 


Context ctx_pathexecstop ip [host="localhost" port=8025]

Context ctxbasicrobot ip [host="127.0.0.1" port=8020]  

ExternalQActor basicrobot context ctxbasicrobot

QActor pathexecstop context ctx_pathexecstop { 
[# var CurMoveTodo = ""    //Upcase, since var to be used in guards
   var StepTime    = "300"
   var PathTodo    = ""
#]
	State s0 initial{  	
		//printCurrentMessage
		[#  CurMoveTodo = "" 
			StepTime = pathexecStopSupport.readStepTime() //stepTimeConfig.json
		#]
		updateResource [# "pathexecsteptime($StepTime)" #]
		println("pathexecstop ready. StepTime=$StepTime") 
	}	
	Transition t0 whenRequest dopath -> doThePath
  	
	State doThePath{
		printCurrentMessage 
		//[# prinln( currentMsg ) #]
		onMsg ( dopath : dopath( PATH )){
			[# PathTodo = payloadArg(0) #]
		    updateResource [# "pathexecdopath($PathTodo)" #]
			run pathut.setPath( PathTodo )  //se payloadArg fallisce non da eccezione! (ma non fa nulla)
		}		 
		println("pathexecstop pathTodo = ${pathut.getPathTodo()}") 
 	}
	Goto nextMove    
	
	
	State nextMove{ 
		[# CurMoveTodo = pathut.nextMove() #]	
		//println("pathexec curMoveTodo=$CurMoveTodo" )
	} 
	Goto endWorkOk if [# CurMoveTodo.length == 0 #] else doMove
	
	State doMove{
		//printCurrentMessage
 		delay 300  //avoid too fast ...
 	}
	Goto doMoveW if [# CurMoveTodo == "w" #] else doMoveTurn
	
	State doMoveTurn{
		//printCurrentMessage
		updateResource [# "pathexecdoturn($CurMoveTodo)" #]
		forward basicrobot -m cmd : cmd($CurMoveTodo) //asynch !!!		
	}
	Transition t0 whenTime 300 ->  nextMove  //wait for move done ...
  
 	State doMoveW{
		//printCurrentMessage
		updateResource [# "pathexecdostep($CurMoveTodo)" #]
		request basicrobot -m step : step( $StepTime )
	}	
	Transition t0 whenEvent alarm     -> endWorkKo
 				  whenReply stepdone  -> nextMove  
	              whenReply stepfail  -> endWorkKo                       
	              
	State endWorkOk{
		//printCurrentMessage
		println("endWorkOk: PATH DONE - BYE")
		updateResource [# "path $PathTodo done" #]	
		replyTo dopath with dopathdone : dopathdone( ok )
	}
	Goto s0 
 
	State endWorkKo{
		printCurrentMessage
		[# var PathStillTodo = pathut.getPathTodo() #]
		updateResource [# "pathstilltodo($PathStillTodo)" #]	
		println("PATH FAILURE - SORRY. PathStillTodo=$PathStillTodo")
		replyTo dopath with dopathfail : dopathfail( $PathStillTodo )
	}	
	Goto s0


} 
