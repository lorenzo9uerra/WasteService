System wasteservice

Request storageAsk : storageAsk(MAT)
Reply storageAt : storageAt(MAT, QNT)
Dispatch storageDeposit : storageDeposit(MAT, QNT)
Request trolleyMove : trolleyMove(LOC)
Request trolleyCollect : trolleyCollect(MAT,QNT)
Request trolleyDeposit : trolleyDeposit(_)

Reply trolleyDone: trolleyDone(_)

// TEST REQUEST
Request loadDeposit : loadDeposit(MAT,QNT)
Request finishLoad : finishLoad(_)

Context ctx_wasteservice ip [host="localhost" port=8023]

// DI PROVA
QActor wasteservice context ctx_wasteservice {
	[#
		var Material = ""
		var Quantity = 0.0f
		var Box = ""
	#]
	State init initial {
		println("Start")
	}
	Goto idle
	
	State idle {
		printCurrentMessage
	}
	Transition t0 whenRequest loadDeposit -> moveTrolleyIndoor
	
	State moveTrolleyIndoor {
		printCurrentMessage
		onMsg(loadDeposit : loadDeposit(MAT,QNT)){
			[#
				Material = payloadArg(0)
				Quantity = payloadArg(1).toFloat()
				Box = Material + "_box"
			#]
		}
		request trolley -m trolleyMove : trolleyMove(indoor)
	}
	Transition t2 whenReply trolleyDone -> makeTrolleyCollect
	
	State makeTrolleyCollect {
		printCurrentMessage
		request trolley -m trolleyCollect : trolleyCollect($Material, $Quantity)
	}
	Transition t3 whenReply trolleyDone -> moveTrolleyDeposit
	
	State moveTrolleyDeposit {
		printCurrentMessage
		// forward wastetruck -m pickedUp : pickedUp(_)
		request trolley -m trolleyMove : trolleyMove($Box)
	}
	Transition t4 whenReply trolleyDone -> makeTrolleyDeposit
	
	State makeTrolleyDeposit {
		printCurrentMessage
		request trolley -m trolleyDeposit : trolleyDeposit(_)
	}
	Transition t5 whenReply trolleyDone -> moveToHome
				  
	State waitTrolleyDone {
		printCurrentMessage
	}
	Transition t6 whenReply trolleyDone -> moveToHome
				  
	State moveToHome {
		printCurrentMessage
		request trolley -m trolleyMove : trolleyMove(home)
	}
	Transition t7 whenReply trolleyDone -> idle
}

QActor trolley context ctx_wasteservice {
	[#
		var Support = it.unibo.lenziguerra.wasteservice.trolley.TrolleySupport.getSupport()
		var Quantity = 0.0f
		var Material = ""
		var Position = ""
		fun getContentLine(): String {
			if (Quantity > 0)                          
				return "\ncontent($Material,$Quantity)"
			else
				return ""
     	}
     	fun getPos(): String {
			return "\npos($Position)"
     	}
	#]
	State init initial {
		println("$Support")
	}
	Goto idle

	State idle {
		printCurrentMessage
		updateResource [# "state(idle)" + getPos() + getContentLine() #]
	}
	Transition t0 whenRequest trolleyMove -> handleMove
				  whenRequest trolleyCollect -> handleCollect
				  whenRequest trolleyDeposit -> handleDeposit
				  whenRequest finishLoad -> handleFinish
				  
	State handleFinish {
		printCurrentMessage
		replyTo finishLoad with trolleyDone : trolleyDone(_)
	}
	Goto idle

	State handleMove {
		printCurrentMessage
		updateResource [# "state(idle)" + getPos() + getContentLine() #]
		onMsg (trolleyMove : trolleyMove(LOC) ) {
			if [# Support.move(payloadArg(0)) #]{
				replyTo trolleyMove with trolleyDone : trolleyDone(success)
				[# Position = payloadArg(0) #]
			}
			else {
				replyTo trolleyMove with trolleyDone : trolleyDone(fail)
			}
		}
	}
	Goto idle
	
	State handleCollect{
		printCurrentMessage
		updateResource [# "state(idle)" + getPos() + getContentLine() #]
		onMsg (trolleyCollect: trolleyCollect(MAT,QNT)){
			[#
			Material = payloadArg(0)
			Quantity = payloadArg(1).toFloat()
			#]
			replyTo trolleyCollect with trolleyDone : trolleyDone(success)
		}
	}
	Goto idle
	
	State handleDeposit{
		printCurrentMessage
		updateResource [# "state(idle)" + getPos() + getContentLine() #]
		onMsg (trolleyDeposit: trolleyDeposit(_)){
			forward storagemanager -m storageDeposit : storageDeposit($Material,$Quantity)
			replyTo trolleyDeposit with trolleyDone : trolleyDone(success)
		}
	}
	Goto idle
}

QActor storagemanager context ctx_wasteservice {
	[#
		var Support = it.unibo.lenziguerra.wasteservice.storage.StorageManagerSupport.getSupport()
	#]
	State init initial {
		println("$Support")
		updateResource [# Support.getPrologContent() #]
	}
	Goto idle
	
	State idle {
		printCurrentMessage
	}
	Transition t0 whenRequest storageAsk -> handleAsk
				  whenMsg storageDeposit -> handleDeposit
	
	State handleAsk {
		printCurrentMessage
		onMsg (storageAsk : storageAsk(MAT) ) {
			[# var SpaceLeft = Support.getSpace(payloadArg(0)) #]
			replyTo storageAsk with storageAt : storageAt($payloadArg(0), $SpaceLeft)
		}
	}
	Goto idle
	
	State handleDeposit {
		onMsg ( storageDeposit : storageDeposit(MAT, QNT) ){
			[# Support.deposit(payloadArg(0), payloadArg(1).toFloat()) #]
			println("$Support")
			updateResource [# Support.getPrologContent() #]
		}
	}
	Goto idle
}