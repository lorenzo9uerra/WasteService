System wasteservice

Request storageAsk : storageAsk(MAT)
Reply storageAt : storageAt(MAT, QNT)
Dispatch storageDeposit : storageDeposit(MAT, QNT)
Request trolleyMove : trolleyMove(X,Y)
Request trolleyCollect : trolleyCollect(MAT,QNT)
Request trolleyDeposit : trolleyDeposit(_)

Reply trolleyDone: trolleyDone(_)

Request triggerDeposit : triggerDeposit(MAT,QNT)
Reply depositDone : depositDone(_)

Dispatch testStorageReset : testStorageReset(_)
Dispatch testStorageSet : testStorageSet(JSON_DATA)

Context ctx_wasteservice ip [host="localhost" port=8023]

QActor wasteservice context ctx_wasteservice {
	[#
		val Support = it.unibo.lenziguerra.wasteservice.wasteservice.WasteserviceSupport()
		var Material = ""
		var Quantity = 0.0f
		var Box = ""
		var Position = "0,0"
	#]
	State start initial {
		println("\tWS | Start")
	}
	Goto home
	
	State home {
		printCurrentMessage
		updateResource [# "tpos(home)" #]
		println("\tWS | Trolley at home")
	}
	Transition t0 whenRequest triggerDeposit -> go_indoor
	
	State go_indoor {
		printCurrentMessage
		onMsg(triggerDeposit : triggerDeposit(MAT,QNT)){
			[#
				Material = payloadArg(0)
				Quantity = payloadArg(1).toFloat()
				Box = Material + "_box"
			#]
		}
		[# Position = Support.getDestination("indoor", Position) #]
		request trolley -m trolleyMove : trolleyMove($Position)
	}
	Transition t2 whenReply trolleyDone -> indoor
	
	State indoor {
		printCurrentMessage
		println("\tWT | Trolley at indoor, picking up $Quantity $Material...")
		updateResource [# "tpos(indoor)" #]
		request trolley -m trolleyCollect : trolleyCollect($Material, $Quantity)
	}
	Transition t3 whenReply trolleyDone -> go_box
	
	State go_box {
		printCurrentMessage
		// forward wastetruck -m pickedUp : pickedUp(_)
		[# Position = Support.getDestination(Box, Position) #]
		request trolley -m trolleyMove : trolleyMove($Position)
	}
	Transition t4 whenReply trolleyDone -> box
	
	State box {
		printCurrentMessage
		println("\tWT | Trolley at $Material box, depositing $Quantity $Material...")
		updateResource [# "tpos(" + Material + "_box)" #]
		request trolley -m trolleyDeposit : trolleyDeposit(_)
	}
	Transition t5 whenReply trolleyDone -> done
					
	State done {
		printCurrentMessage
		println("\tWT | Done deposit action")
		replyTo triggerDeposit with depositDone : depositDone(_)
	}
	Transition t0 whenTime 0 -> go_home 
				  whenRequest triggerDeposit -> go_indoor
				  
	State go_home {
		printCurrentMessage
		[# Position = Support.getDestination("home", Position) #]
		request trolley -m trolleyMove : trolleyMove($Position)
	}
	Transition t7 whenReply trolleyDone -> home
}

QActor trolley context ctx_wasteservice {
	[#
		val Support = it.unibo.lenziguerra.wasteservice.trolley.TrolleySupport.getSupport()
	#]
	State init initial {
	}
	Goto idle

	State idle {
		printCurrentMessage
		updateResource [# Support.getPrologContent() #]
		println("$Support")
	}
	Transition t0 whenRequest trolleyMove -> handleMove
				  whenRequest trolleyCollect -> handleCollect
				  whenRequest trolleyDeposit -> handleDeposit

	State handleMove {
		printCurrentMessage
		updateResource [# Support.getPrologContent() #]
		onMsg (trolleyMove : trolleyMove(X,Y) ) {
			if [# Support.move(payloadArg(0).toInt(), payloadArg(1).toInt()) #]{
				replyTo trolleyMove with trolleyDone : trolleyDone(success)
				[# Support.setPosition(payloadArg(0).toInt(), payloadArg(1).toInt()) #]
			}
			else {
				replyTo trolleyMove with trolleyDone : trolleyDone(fail)
			}
		}
	}
	Goto idle
	
	State handleCollect{
		printCurrentMessage
		updateResource [# Support.getPrologContent()#]
		onMsg (trolleyCollect: trolleyCollect(MAT,QNT)){
			[#
				Support.collect(payloadArg(0), payloadArg(1).toFloat())
			#]
			replyTo trolleyCollect with trolleyDone : trolleyDone(success)
		}
	}
	Goto idle
	
	State handleDeposit{
		printCurrentMessage
		updateResource [# Support.getPrologContent()#]
		onMsg (trolleyDeposit: trolleyDeposit(_)){
			[#
				val Material = Support.getMaterial()
				val Quantity = Support.getQuantity()
			#]
			forward storagemanager -m storageDeposit : storageDeposit($Material,$Quantity)
			replyTo trolleyDeposit with trolleyDone : trolleyDone(success)
		}
	}
	Goto idle
}

QActor storagemanager context ctx_wasteservice {
	[#
		var Support = it.unibo.lenziguerra.wasteservice.storage.StorageManagerSupport.getSupport()
	#]
	State init initial {
		println("$Support")
		updateResource [# Support.getPrologContent() #]
	}
	Goto idle
	
	State idle {
		printCurrentMessage
	}
	Transition t0 whenRequest storageAsk -> handleAsk
				  whenMsg storageDeposit -> handleDeposit
				  whenMsg testStorageReset -> handleTestReset
				  whenMsg testStorageSet -> handleTestSet
	
	State handleAsk {
		printCurrentMessage
		onMsg (storageAsk : storageAsk(MAT) ) {
			[# var SpaceLeft = Support.getSpace(payloadArg(0)) #]
			replyTo storageAsk with storageAt : storageAt($payloadArg(0), $SpaceLeft)
		}
	}
	Goto idle
	
	State handleDeposit {
		onMsg ( storageDeposit : storageDeposit(MAT, QNT) ){
			[# Support.deposit(payloadArg(0), payloadArg(1).toFloat()) #]
			println("$Support")
			updateResource [# Support.getPrologContent() #]
		}
	}
	Goto idle
	
	
	State handleTestReset {
		[# Support.reset() #]
		println("Storage manager: reset contents")
		println("$Support")
		updateResource [# Support.getPrologContent() #]
	}
	Goto idle
	
	State handleTestSet {
		onMsg ( testStorageSet : testStorageSet(JSON_DATA) ){
			[# Support.set(org.json.JSONObject(payloadArg(0)).toMap() as Map<String, Float>) #]
			println("Storage manager: set contents ${payloadArg(0)}")
			println("$Support")
			updateResource [# Support.getPrologContent() #]
		}
	}
	Goto idle
}