/* Generated by AN DISI Unibo */ 
package it.unibo.trolley

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Trolley ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "init"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
				var Support = it.unibo.lenziguerra.wasteservice.trolley.TrolleySupport.getSupport()
				var Quantity = 0.0f
				var Material = ""
				var Position = ""
				fun getContentLine(): String {
					if (Quantity > 0)                          
						return "\ncontent($Material,$Quantity)"
					else
						return ""
		     	}
		     	fun getPos(): String {
					return "\npos($Position)"
		     	}
		return { //this:ActionBasciFsm
				state("init") { //this:State
					action { //it:State
						println("$Support")
					}
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("idle") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						updateResourceRep( "state(idle)" + getPos() + getContentLine()  
						)
					}
					 transition(edgeName="t00",targetState="handleMove",cond=whenRequest("trolleyMove"))
					transition(edgeName="t01",targetState="handleCollect",cond=whenRequest("trolleyCollect"))
					transition(edgeName="t02",targetState="handleDeposit",cond=whenRequest("trolleyDeposit"))
					transition(edgeName="t03",targetState="handleFinish",cond=whenRequest("finishLoad"))
				}	 
				state("handleFinish") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
					}
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("handleMove") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						updateResourceRep( "state(idle)" + getPos() + getContentLine()  
						)
						if( checkMsgContent( Term.createTerm("trolleyMove(LOC)"), Term.createTerm("trolleyMove(LOC)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								if(  Support.move(payloadArg(0))  
								 ){answer("trolleyMove", "trolleyDone", "trolleyDone(success)"   )  
								 Position = payloadArg(0)  
								}
								else
								 {answer("trolleyMove", "trolleyDone", "trolleyDone(fail)"   )  
								 }
						}
					}
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("handleCollect") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						updateResourceRep( "state(idle)" + getPos() + getContentLine()  
						)
						if( checkMsgContent( Term.createTerm("trolleyCollect(MAT,QNT)"), Term.createTerm("trolleyCollect(MAT,QNT)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
											Material = payloadArg(0)
											Quantity = payloadArg(1).toFloat()
								answer("trolleyCollect", "trolleyDone", "trolleyDone(success)"   )  
						}
					}
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("handleDeposit") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						updateResourceRep( "state(idle)" + getPos() + getContentLine()  
						)
						if( checkMsgContent( Term.createTerm("trolleyDeposit(_)"), Term.createTerm("trolleyDeposit(_)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								answer("trolleyDeposit", "trolleyDone", "trolleyDone(success)"   )  
						}
					}
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
			}
		}
}
