/* Generated by AN DISI Unibo */ 
package it.unibo.trolley

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Trolley ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "init"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
				val Support = it.unibo.lenziguerra.wasteservice.trolley.TrolleySupport.getSupport()
		return { //this:ActionBasciFsm
				state("init") { //this:State
					action { //it:State
					}
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("idle") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						updateResourceRep( Support.getPrologContent()  
						)
						println("$Support")
					}
					 transition(edgeName="t013",targetState="handleMove",cond=whenRequest("trolleyMove"))
					transition(edgeName="t014",targetState="handleCollect",cond=whenRequest("trolleyCollect"))
					transition(edgeName="t015",targetState="handleDeposit",cond=whenRequest("trolleyDeposit"))
				}	 
				state("handleMove") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						if( checkMsgContent( Term.createTerm("trolleyMove(X,Y)"), Term.createTerm("trolleyMove(X,Y)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 
												val Path = Support.preparePath(payloadArg(0).toInt(), payloadArg(1).toInt()) 
												println("Doing path $Path")
								request("dopath", "dopath($Path)" ,"pathexec" )  
						}
					}
					 transition(edgeName="t016",targetState="moveSuccess",cond=whenReply("dopathdone"))
					transition(edgeName="t017",targetState="moveFail",cond=whenReply("dopathfail"))
				}	 
				state("moveSuccess") { //this:State
					action { //it:State
						 Support.applyPath()  
						answer("trolleyMove", "trolleyDone", "trolleyDone(_)"   )  
					}
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("moveFail") { //this:State
					action { //it:State
						answer("trolleyMove", "trolleyFail", "trolleyFail(move)"   )  
						println("####################################")
						println("# TROLLEY BLOCCATO! AGGIUSTARE     #")
						println("# MANUALMENTE E RIAVVIARE!         #")
						println("####################################")
					}
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("handleCollect") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						if( checkMsgContent( Term.createTerm("trolleyCollect(MAT,QNT)"), Term.createTerm("trolleyCollect(MAT,QNT)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												Support.collect(payloadArg(0), payloadArg(1).toFloat())
								answer("trolleyCollect", "trolleyDone", "trolleyDone(_)"   )  
						}
					}
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("handleDeposit") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						if( checkMsgContent( Term.createTerm("trolleyDeposit(_)"), Term.createTerm("trolleyDeposit(_)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												val Material = Support.getMaterial()
												val Quantity = Support.getQuantity()
												Support.deposit()
								forward("storageDeposit", "storageDeposit($Material,$Quantity)" ,"storagemanager" ) 
								answer("trolleyDeposit", "trolleyDone", "trolleyDone(_)"   )  
						}
					}
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
			}
		}
}
