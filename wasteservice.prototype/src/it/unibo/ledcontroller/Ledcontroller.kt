/* Generated by AN DISI Unibo */ 
package it.unibo.ledcontroller

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Ledcontroller ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "init"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
				var AtHome = false
				var Stopped = false
		return { //this:ActionBasciFsm
				state("init") { //this:State
					action { //it:State
						coapObserverUtil.startObserving(myself ,"trolley" )
						coapObserverUtil.startObserving(myself ,"wasteservice" )
						forward("ledSet", "ledSet(on)" ,"led" ) 
					}
					 transition( edgeName="goto",targetState="observe", cond=doswitch() )
				}	 
				state("observe") { //this:State
					action { //it:State
					}
					 transition(edgeName="t00",targetState="handleStatus",cond=whenDispatch("coapUpdate"))
				}	 
				state("handleStatus") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						if( checkMsgContent( Term.createTerm("coapUpdate(RESOURCE,VALUE)"), Term.createTerm("coapUpdate(RESOURCE,VALUE)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("Led Controller | Received update from ${payloadArg(0)}, is ${payloadArg(1)} ; currently AtHome $AtHome Stopped $Stopped")
								 var Next = ""  
								if(  payloadArg(0) == "trolley"  
								 ){ Stopped = resourcePrologUtils.resourcePayloadArg(myself, "state", 0) == "stopped"  
								if(  Stopped  
								 ){ 
														Next = "off"
								}
								else
								 {if(  !AtHome  
								  ){ Next = "blinking"  
								 }
								 else
								  { Next = "on"  
								  }
								 }
								}
								if(  payloadArg(0) == "wasteservice"  
								 ){ AtHome = resourcePrologUtils.resourcePayloadArg(myself, "tpos", 0) == "home"  
								if(  !Stopped  
								 ){if(  AtHome  
								 ){ Next = "on"  
								}
								else
								 { Next = "blinking"  
								 }
								}
								}
								if(  Next != ""  
								 ){println("Led Controller | Setting led to $Next")
								forward("ledSet", "ledSet($Next)" ,"led" ) 
								}
						}
					}
					 transition( edgeName="goto",targetState="observe", cond=doswitch() )
				}	 
			}
		}
}
