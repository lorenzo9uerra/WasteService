/* Generated by AN DISI Unibo */ 
package it.unibo.wasteservicestatusgui

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Wasteservicestatusgui ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "init"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
		
				var TrolleyPos = ""
				var TrolleyStatus = ""
				var LedStatus =	""
				var StoragePlastic = -1f
				var StorageGlass = -1f
		return { //this:ActionBasciFsm
				state("init") { //this:State
					action { //it:State
						coapObserverUtil.startObserving(myself ,"trolley" )
						coapObserverUtil.startObserving(myself ,"wasteservice" )
						coapObserverUtil.startObserving(myself ,"blinkled" )
						coapObserverUtil.startObserving(myself ,"storagemanager" )
					}
					 transition( edgeName="goto",targetState="show", cond=doswitch() )
				}	 
				state("show") { //this:State
					action { //it:State
						println("	GUI: Trolley [Position: $TrolleyPos, Status: $TrolleyStatus], Led [$LedStatus], Storage: [Glass: $StorageGlass, Plastic: $StoragePlastic]")
						updateResourceRep( "GUI: Trolley [Position: $TrolleyPos, Status: $TrolleyStatus], Led [$LedStatus], Storage: [Glass: $StorageGlass, Plastic: $StoragePlastic]"  
						)
					}
					 transition(edgeName="t02",targetState="handleUpdate",cond=whenDispatch("coapUpdate"))
				}	 
				state("handleUpdate") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						if( checkMsgContent( Term.createTerm("coapUpdate(RESOURCE,VALUE)"), Term.createTerm("coapUpdate(RESOURCE,VALUE)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								if(  payloadArg(0) == "trolley"  
								 ){ TrolleyStatus = resourcePrologUtils.resourcePayloadArg(myself, "state", 0)  
								}
								if(  payloadArg(0) == "blinkled"  
								 ){ LedStatus = resourcePrologUtils.resourcePayloadArg(myself, "ledState", 0)  
								}
								if(  payloadArg(0) == "wasteservice"  
								 ){ TrolleyPos = resourcePrologUtils.resourcePayloadArg(myself, "tpos", 0)  
								}
								if(  payloadArg(0) == "storagemanager"  
								 ){
								  					val lines = resourcePrologUtils.resourcePayloadLines(myself, "content")
								  					for (line in lines) {
								  						when (resourcePrologUtils.extractPayload(line, 0)) {
								  							"glass" -> StorageGlass = resourcePrologUtils.extractPayload(line, 1).toFloat()
								  							"plastic" -> StoragePlastic = resourcePrologUtils.extractPayload(line, 1).toFloat()
								  						}
								  					}
								}
						}
					}
					 transition( edgeName="goto",targetState="show", cond=doswitch() )
				}	 
			}
		}
}
