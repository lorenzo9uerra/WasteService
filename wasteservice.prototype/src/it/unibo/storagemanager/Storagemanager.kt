/* Generated by AN DISI Unibo */ 
package it.unibo.storagemanager

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Storagemanager ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "init"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
				var Content = mutableMapOf("glass" to 0.0, "plastic" to 0.0)
				var MaxContent = mapOf("glass" to 50.0, "plastic" to 50.0)
		return { //this:ActionBasciFsm
				state("init") { //this:State
					action { //it:State
						println("STORAGE: Glass ${Content["glass"]}/${MaxContent["glass"]}, Plastic ${Content["plastic"]}/${MaxContent["plastic"]}")
						updateResourceRep( Content.entries.map { "content(${it.key},${it.value})" }.joinToString("\n")  
						)
					}
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("idle") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
					}
					 transition(edgeName="t013",targetState="handleAsk",cond=whenRequest("storageAsk"))
					transition(edgeName="t014",targetState="handleDeposit",cond=whenDispatch("storageDeposit"))
				}	 
				state("handleAsk") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						if( checkMsgContent( Term.createTerm("storageAsk(MAT)"), Term.createTerm("storageAsk(MAT)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 var SpaceLeft = MaxContent.getOrDefault(payloadArg(0), 0.0) - Content.getOrDefault(payloadArg(0), 0.0)  
								answer("storageAsk", "storageAt", "storageAt(${payloadArg(0)},$SpaceLeft)"   )  
						}
					}
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("handleDeposit") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("storageDeposit(MAT,QNT)"), Term.createTerm("storageDeposit(MAT,QNT)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 Content[payloadArg(0)] = Content.getOrDefault(payloadArg(0), 0.0) + payloadArg(1).toDouble()  
								println("STORAGE: Glass ${Content["glass"]}/${MaxContent["glass"]}, Plastic ${Content["plastic"]}/${MaxContent["plastic"]}")
								updateResourceRep( Content.entries.map { "content(${it.key},${it.value})" }.joinToString("\n")  
								)
						}
					}
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
			}
		}
}
